/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/reset.h>

#include "helper.h"
#include "mouse.dtsi"
#include "symbols.h"

#define rfu &none

#define DEF 0
#define NAV 1
#define NUM 2
#define MOU 3
#define SYM 4
#define LK 5
#define UML 6
#define SYS 7

&caps_word {
    continue-list = <UNDERSCORE MINUS FSLH LS(FSLH)>;
};

ZMK_BEHAVIOR(endsemi, macro,
    wait-ms = <30>;
    tap-ms = <10>;
    bindings = <&macro_tap &kp END>
             , <&macro_tap &kp LS(COMMA)>;
)

ZMK_BEHAVIOR(swapper3, macro,
    wait-ms = <30>;
    tap-ms = <10>;
    bindings = <&macro_press &mo NAV &kp LALT>
             , <&macro_tap &kp TAB>
             , <&macro_pause_for_release>
             , <&macro_release &mo NAV &kp LALT>;
)

ZMK_BEHAVIOR(sz, macro,
    wait-ms = <40>;
    tap-ms = <5>;
    bindings = <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>
             , <&macro_pause_for_release>
             , <&macro_tap &kp DE_SZ>
             , <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>;
)

ZMK_BEHAVIOR(ue, macro,
    wait-ms = <40>;
    tap-ms = <5>;
    bindings = <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>
             , <&macro_pause_for_release>
             , <&macro_tap &kp DE_UE>
             , <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>;
)

ZMK_BEHAVIOR(oe, macro,
    wait-ms = <40>;
    tap-ms = <5>;
    bindings = <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>
             , <&macro_pause_for_release>
             , <&macro_tap &kp DE_OE>
             , <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>;
)

ZMK_BEHAVIOR(ae, macro,
    wait-ms = <40>;
    tap-ms = <5>;
    bindings = <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>
             , <&macro_pause_for_release>
             , <&macro_tap &kp DE_AE>
             , <&macro_press &kp LGUI>
             , <&macro_tap &kp SPACE>
             , <&macro_release &kp LGUI>;
)

ZMK_BEHAVIOR(swapper4, macro,
    wait-ms = <30>;
    tap-ms = <10>;
    bindings = <&macro_press &mo NAV &kp LCTRL>
             , <&macro_tap &kp TAB>
             , <&macro_pause_for_release>
             , <&macro_release &mo NAV &kp LCTRL>;
)

ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&kp>;
    hold-while-undecided;
)

ZMK_BEHAVIOR(lclsht, hold_tap,
   flavor = "tap-preferred";
   tapping-term-ms = <280>;
   quick-tap-ms = <175>;
   bindings = <&sk>, <&kp>;
)

ZMK_BEHAVIOR(hrsl, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&sl>;
    hold-while-undecided;
)

ZMK_BEHAVIOR(ltmorph, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&layer_sft>, <&kp>;
)

ZMK_BEHAVIOR(srm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <250>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&sk>;
)

ZMK_BEHAVIOR(hpr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&smart_bspc>;
    hold-while-undecided;
)

ZMK_BEHAVIOR(lm, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&kp>;
    require-prior-idle-ms = <350>;
)

ZMK_BEHAVIOR(ht, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&kp>;
    require-prior-idle-ms = <250>;
)

ZMK_BEHAVIOR(htc, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&scomma>;
    require-prior-idle-ms = <250>;
)

ZMK_BEHAVIOR(ltsk, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&sk>;
)

ZMK_BEHAVIOR(kpsl, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&sl>;
)

ZMK_BEHAVIOR(ltsl, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&sl>;
)

ZMK_BEHAVIOR(tm, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&to>;
    hold-while-undecided;
)

ZMK_BEHAVIOR(atm, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
    quick-tap-ms = <175>;
    bindings = <&kp>, <&to>;
)

ZMK_BEHAVIOR(ltm, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&to>;
)

ZMK_BEHAVIOR(lms, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&swapper3>, <&kp>;
)

ZMK_BEHAVIOR(rms, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    bindings = <&key_repeat>, <&kp>;
)
#define ARROWKEYS LM1 LM2 LM3 LT2

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <ARROWKEYS>;
)
ZMK_BEHAVIOR(swapper2, tri_state,
    bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
    ignored-key-positions = <ARROWKEYS>;
)

// Custom Combos
#undef COMBO_TERM
#define COMBO_TERM 40

// use require-prior-idle-ms for combos
//#undef COMBO_HOOK
//#define COMBO_HOOK require-prior-idle-ms = <280>;

#define ______ &trans
#define HT(key) &lm LC(key) key

ZMK_BEHAVIOR(smart_bspc, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT)>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

SIMPLE_MORPH(layer_sft, SFT, &mo NAV, &mo MOU)

// tab: brace open, shift + tap: brace close
SIMPLE_MORPH(prn_morph, SFT, &kp LPRN, &kp RPRN)
SIMPLE_MORPH(brkt_morph, SFT, &kp LBKT, &kp RBKT)
SIMPLE_MORPH(brc_morph, SFT, &kp LBRC, &kp RBRC)
SIMPLE_MORPH(rabk_morph, SFT, &kp LT, &kp GT)

SIMPLE_MORPH(scomma, SFT, &kp COMMA, &kp SEMI)

ZMK_COMBO(sys_layer_right, &mo SYS, RH1 RH0, ALL)
ZMK_COMBO(sys_layer_left, &mo SYS, LH1 LH0, ALL)

ZMK_LAYER(default_layer,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    &kp Q         &lms 0 W         &kp E         &kp R         &kp T          &kp Z         &kp U         &kp I         &kp O         &kp P        XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX   &hrm LSHFT A   &kp S         &lt LK D      &lt UML F     &kp G             &kp H         &kp J         &kp K         &kp L      &hrm RSHFT COLON XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX   &hrm LCTRL Y   &ht LGUI X    &ht LALT C  &lclsht LC(LSHFT) V &kp B         &kp N   &lclsht RC(RSHFT) M &htc LALT 0  &ht RGUI DOT &hrm RCTRL ESC XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                            &lt NUM TAB &ltmorph 0 SPACE     &lt SYM RET   &smart_bspc   XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)
ZMK_LAYER(nav_layer,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    U_WH_U        &kp LC(S)     &kp LA(E)     HT(PG_DN)     &key_repeat       U_WH_L        &kp PG_UP     ______        &kp PG_DN     U_WH_R       XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    ______        &kp LA(S)     &kp LA(D)     &kp LA(F)     &kp LGUI          &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     ______       XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    ______        ______        ______        ______        &endsemi          ______   &lclsht RC(RSHFT) HOME &ht LALT LA(X) &ht RGUI END  ______  XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                              ______        &ltm NAV DEF     ______         ______                                                 XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(numbers_layer,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    ______        HT(F7)        HT(F8)        HT(F9)        HT(F12)           ______        HT(N7)        HT(N8)        HT(N9)        &kp COMMA    XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    ______        HT(F4)        HT(F5)        HT(F6)        HT(F11)           HT(N0)        HT(N4)        HT(N5)        HT(N6)        ______       XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    ______        &ht LGUI F1   &ht LALT F2 &lclsht RC(RSHFT) F3 HT(F10)      ______  &lclsht RC(RSHFT) N1 &ht LALT N2   &ht RGUI N3 &hrm RCTRL DOT XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                              ______        &ltm NAV DEF     ______         ______                                                 XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(mouse_layer,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX   U_WH_U        U_WH_L        U_MS_U        U_WH_R        ______            ______        U_WH_L        U_MS_U        U_WH_R        U_WH_U        XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX   ______        U_MS_L        U_MS_D        U_MS_R        &kp LGUI          &kp LGUI      U_MS_L        U_MS_D        U_MS_R        ______       XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX   U_WH_D        U_BTN3        U_BTN2        U_BTN1        &swapper3         &swapper3        U_BTN1        U_BTN2         U_BTN3       U_WH_D     XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                              ______        &ltm NAV DEF     ______         ______                                                 XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(symbols_layer,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    ______        &caps_word    ______        ______        ______        &kp C_VOLUME_DOWN &kp C_PREVIOUS &kp C_PLAY_PAUSE &kp C_NEXT &kp C_VOLUME_UP XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &kp LT        &kp LBRC      &kp LBKT      &kp LPRN      rfu               rfu           &prn_morph    &brkt_morph   &brc_morph    &rabk_morph   XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &kp RCTRL     &caps_word    ______        ______        ______            ______        ______        ______        &kp LGUI    &hrm RCTRL LA(F4)  XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                              ______        &kp SPACE         ______        ______                                                 XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(leader_key,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    &kp QMARK     &kp AT        &kp EXCL      &kp BSLH      &kp TILDE         &kp DLLR      &kp UNDER     &kp EQUAL     &kp PIPE      &kp PRCNT    XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &kp AMPS      &kp SQT       &kp DQT       &kp FSLH      &kp GRAVE         &kp HASH      &kp PLUS      &kp MINUS     &kp DQT       &kp DLLR     XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &kp RCTRL     &kp STAR      &kp COMMA     &kp CARET     &kp BSLH          &kp EXCL      &kp QMARK     &kp SEMI      &kp COLON     &kp RCTRL    XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                              ______        ______            ______        ______                                                 XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(umlaut,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    rfu           rfu           rfu           rfu           rfu               &sz           &ue           rfu           &oe           rfu          XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &ae           rfu           rfu           rfu           rfu               rfu           rfu           rfu           rfu           rfu          XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    rfu           rfu           rfu           rfu           rfu               rfu           rfu           rfu           rfu           rfu          XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                              rfu           rfu               rfu           rfu                                                    XXX
  //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(system_layer,
  // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                              ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
XXX    &bootloader   &bt BT_CLR    &bt BT_NXT    &rgb_ug RGB_HUD &rgb_ug RGB_COLOR_HSB(128,100,100)         &ext_power EP_ON &ext_power EP_OFF ______  ______      &bootloader    XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &rgb_ug RGB_TOG &rgb_ug RGB_EFF &rgb_ug RGB_EFR &rgb_ug RGB_BRI &rgb_ug RGB_BRD                   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     XXX
  // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
XXX    &rgb_ug RGB_SPI &rgb_ug RGB_SPD &rgb_ug RGB_SAI &rgb_ug RGB_SAD &rgb_ug RGB_HUI                      ______        ______        ______        ______        ______        XXX
  // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                              ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
XXX                                               ______        ______                                       ______        ______                                                 XXX
  //                                           ╰─────────────┴─────────────╯                              ╰─────────────┴─────────────╯
)
